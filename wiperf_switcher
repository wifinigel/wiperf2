#! /bin/bash
#
# wiperf_switcher       script to switch wiperf on/off
#
# Written by Nigel Bowden <wifinigel@gmail.com>.
#

set -e

NAME=wiperf_switcher
DESC="Script to switch wiperf mode on/off"
STATUS_FILE="/etc/wlanpi-state"

HOME_DIR="/opt/wiperf"
USERNAME="root"
CFG_DIR="/etc/wiperf"
CFG_FILE="$CFG_DIR/config.ini"
LOG_FILE="/var/log/wiperf_switcher.log"
GRAFANA_PORT=4000
WLAN_INTERFACE=wlan0
ETH_INTERFACE=eth0

# Check we're root
if [[ $EUID -ne 0 ]]; then
   err_msg="This script must be run as root" 
   echo $err_msg | tee $LOG_FILE
   exit 1
fi

###############################################################################
#
# Activate wiperf:
#
# 1.  Check that a mode is defined in config.ini
# 2.  Check interface wlan0 is available (wireless NIC plugged in)
#       a. wlan0 - wireless NIC available
#       b. eth0 - ethernet port available
# 3.  Enable & start the wiperf service
# 4.  If the InfluxDB & Grafana service exists, assume this is a 
#     quickstart probe and activate those services
# 5.  Add fw rules to harden eth0 & wlan0 and allow Grafana UI access
# 6.  Backup various existing files to allow restoration when wiperf
#     deactivated
# 7. Move a number of existing files that need to be replaced
# 8. Create status file to indicate wiperf is active
# 9. Reboot the wlanpi to ensure clean activation
#
# Note: /etc/sysctl.conf included to ensure forwarding
#    cannot be accidentally be enabled in probe mode if
#    has been changed by some other process
#
###############################################################################
wiperf_on () {

  echo "Starting switch from classic mode to wiperf mode" | tee $LOG_FILE

  # check that the WLAN Pi is in classic mode
  PI_STATUS=`cat $STATUS_FILE | grep 'classic'` || true
  if  [ -z "$PI_STATUS" ]; then
     echo "Failed - WLAN Pi is not in classic mode. (exiting)"  | tee -a $LOG_FILE
     exit 1
  fi

  ############################################
  # 1. Get the probe mode (ethernet/wireless)
  ############################################
  MODE=`cat ${CFG_FILE} | grep 'probe_mode:' | awk -F'[: ]*' '{print $2}'` || true
  if  [ -z "$MODE" ]; then
    echo "No mode found in config file (exiting)" | tee -a $LOG_FILE 
    exit 1
  else
    echo "Selected mode in cfg file: ${MODE}" | tee -a $LOG_FILE 
  fi

  #######################################################################
  # 2. Check if wlan or eth interface is available (depending on config)
  #######################################################################
  echo "Checking expected interfaces are available..."  | tee -a $LOG_FILE
  if [ "$MODE" = "ethernet" ]; then
    # Check if eth0 available before we start changing things 
    TESTING_IF=`ip a | grep ${ETH_INTERFACE}` || true
    if  [ -z "$TESTING_IF" ]; then
      echo "No Eth Interface available! (exiting)" | tee -a $LOG_FILE 
      exit 1
    fi
    echo "Ethernet details: ${TESTING_IF}" | tee -a $LOG_FILE
  else
    # Check if wlan0 available before we start changing things 
    TESTING_IF=`ip a | grep ${WLAN_INTERFACE}` || true
    if  [ -z "$TESTING_IF" ]; then
      echo "No WLAN Interface available! (exiting)" | tee -a $LOG_FILE 
      exit 1
    fi
    echo "WLAN details ${TESTING_IF}" | tee -a $LOG_FILE
  fi

  ############################################
  # 3. Enable & start the wiperf service
  ############################################
  systemctl enable wiperf  | tee -a $LOG_FILE
  systemctl start wiperf  | tee -a $LOG_FILE

  #################################################
  # 4. Start Grafana & InfluxDB if both installed 
  #################################################
  echo "Checking for optional Grafana & InfluxDB services."  | tee -a $LOG_FILE
  echo "Checking for Grafana service."  | tee -a $LOG_FILE
  if systemctl status grafana-server | grep loaded; then

    echo "Grafana service found, checking for Influx."  | tee -a $LOG_FILE
    if systemctl status influxdb | grep loaded; then

      echo "Influx service found, enabling & starting Grafana & Influx services."
      systemctl enable influxdb  | tee -a $LOG_FILE
      systemctl start influxdb  | tee -a $LOG_FILE
      systemctl enable grafana-server  | tee -a $LOG_FILE
      systemctl start grafana-server  | tee -a $LOG_FILE
    
    else
      echo "InfluxDB not found, not starting Grafana or InfluxDB services" | tee -a $LOG_FILE
    fi 

  else
    echo "Optional Grafana and/or Influx services not detected, services not started." | tee -a $LOG_FILE
  fi 

  #################################################################################
  # 5. Harden eth0 & wlan0 by adding fw rules - allow only ssh in on eth0 & wlan0
  #    and alow Grafana web UI access (if applicable)
  #################################################################################
  # open ports on ufw firewall
  ufw insert 1 allow in on eth0 to any port ssh
  ufw insert 2 allow in on eth0 to any port http
  ufw insert 3 deny in on eth0
  ufw insert 4 allow in on wlan0 to any port ssh
  ufw insert 5 allow in on wlan0 to any port http
  ufw insert 6 deny in on wlan0
  ufw insert 7 allow in on wlan1 to any port ssh
  ufw insert 8 allow in on wlan1 to any port http
  ufw insert 9 deny in on wlan1

  if systemctl status grafana-server --no-pager; then
    ufw insert 1 allow ${GRAFANA_PORT}/tcp comment "Grafana access"
  fi

  ##################################
  # 6. Backup existing config files
  ##################################
  declare -a arr=(
      "/etc/network/interfaces" 
      "/etc/sysctl.conf"
      "/etc/wpa_supplicant/wpa_supplicant.conf"
  )
  echo "Backing up config files..." | tee -a $LOG_FILE

  for item in "${arr[@]}"
  do
    if [ -f "$item" ]; then
      mv $item ${item}.probe
    fi
  done

  ##################################
  # 7. Link to wiperf config files
  ##################################
  echo "Linking temp config files..." | tee -a $LOG_FILE
  ln -s ${CFG_DIR}/etc/network/interfaces /etc/network/interfaces  
  ln -s ${CFG_DIR}/etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf
  ln -s ${CFG_DIR}/etc/sysctl.conf /etc/sysctl.conf

  ############################################################
  # 8. Create status file to display status messages on FPMS
  ############################################################
  echo "Updating status file." | tee -a $LOG_FILE

  # Signal that wconsole active
  echo "wiperf" > $STATUS_FILE

  #############
  # 9. Reboot 
  #############
  echo "WLAN Pi will now reboot" | tee -a $LOG_FILE
  sleep 1
  sync
  reboot
}

###############################################################################
#
# Deactivate wiperf:
#
# 1. Get the probe mode
# 2. Disable & stop the wiperf service
# 3. If the InfluxDB & Grafana service exists, assume this is a 
#    quickstart probe and stop those services
# 4. Remove fw rules added during mode switch
# 5. Remove links created during activation
# 6. Restore config files backed up during activation
# 7. Remove status file to indicate wiperf no longer active
# 8. Reboot wlanpi to provide clean restoration of services
#
###############################################################################
wiperf_off () {

  # check what state the WLAN Pi is in
  PI_STATUS=`cat $STATUS_FILE | grep 'wiperf'` || true
  if  [ -z "$PI_STATUS" ]; then
     echo "Failed - WLAN Pi is not in wiperf mode. (exiting)" | tee -a $LOG_FILE
     exit 1
  fi

   echo "Starting switch from wiperf mode to classic mode" | tee -a $LOG_FILE

  ##################################
  # 1. Remove eth0 & wlan0 fw rules
  ##################################
  ufw delete allow in on eth0 to any port ssh
  ufw delete allow in on eth0 to any port http
  ufw delete deny in on eth0
  ufw delete allow in on wlan0 to any port ssh
  ufw delete allow in on wlan0 to any port http
  ufw delete deny in on wlan0
  ufw delete allow in on wlan1 to any port ssh
  ufw delete allow in on wlan1 to any port http
  ufw delete deny in on wlan1

  if systemctl status grafana-server --no-pager; then
     ufw delete  allow ${GRAFANA_PORT}/tcp
  fi

  ############################################
  # 2. Disable & stop the wiperf service
  ############################################
  systemctl stop wiperf  | tee -a $LOG_FILE
  systemctl disable wiperf  | tee -a $LOG_FILE

  #################################################
  # 3. Stop Grafana & InfluxDB if both installed 
  #################################################
  echo "Checking for optional Grafana & InfluxDB services."  | tee -a $LOG_FILE
  echo "Checking for Grafana service."  | tee -a $LOG_FILE
  if systemctl status grafana-server --no-pager; then

    echo "Grafana service found, checking for Influx."  | tee -a $LOG_FILE
    if systemctl status influxdb --no-pager; then

      echo "Influx service found, stopping & disabling Grafana & Influx services."
      systemctl stop influxdb  | tee -a $LOG_FILE
      systemctl disable influxdb  | tee -a $LOG_FILE
      systemctl stop grafana-server  | tee -a $LOG_FILE
      systemctl disable grafana-server  | tee -a $LOG_FILE 
    
    else
      echo "InfluxDB not found, not stopping Grafana or InfluxDB services" | tee -a $LOG_FILE
    fi 

  else
    echo "Optional Grafana and/or Influx services not detected, services not stopped." | tee -a $LOG_FILE
  fi 

  ##################################
  # 3. Remove links to config files
  ##################################
  echo "Removing links to temp config files" | tee -a $LOG_FILE
  unlink /etc/network/interfaces
  unlink /etc/sysctl.conf
  unlink /etc/wpa_supplicant/wpa_supplicant.conf
 
  ###################################
  # 4. Restore original config files
  ###################################
  declare -a arr=(
      "/etc/network/interfaces" 
      "/etc/sysctl.conf"
      "/etc/wpa_supplicant/wpa_supplicant.conf"
  )

  echo "Restoring original config files" | tee -a $LOG_FILE

  for item in "${arr[@]}"
  do
    if [ -f "${item}.probe" ]; then
      mv ${item}.probe $item
    fi
  done

  ###################################
  # 5. Update FPMS status file
  ###################################
  echo "WLANPi will now reboot"
  echo "classic" > $STATUS_FILE

  ###################################
  # 6. Reboot
  ###################################
  echo "Rebooting" | tee -a $LOG_FILE
  sleep 1
  sync
  reboot
}

status () {
  PI_STATUS=`cat $STATUS_FILE | grep 'wiperf'` || true
  if  [ -z "$PI_STATUS" ]; then
    echo "wiperf is currently disabled"
    exit 0
  else
    echo "wiperf is currently enabled"
    exit 0
  fi
}

case "$1" in
  on)
        wiperf_on
        ;;
  off)
        wiperf_off
        ;;
  status)
        status
        ;;
  *)
        N=/usr/sbin/$NAME
        echo "Usage: $N {on|off|status}" >&2
        exit 0
        ;;
esac

exit 0
